
import java.io.File;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.io.ObjectInputStream;
import java.io.PrintWriter;
import java.io.UnsupportedEncodingException;
import java.net.Socket;
import java.sql.SQLException;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;

public class PrincipalFrame extends javax.swing.JFrame {

    Rilevazione rl;
    private JFileChooser chooser;

    public PrincipalFrame() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jButton1 = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        jTextField1 = new javax.swing.JTextField();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTextArea1 = new javax.swing.JTextArea();
        jButton2 = new javax.swing.JButton();
        jButton3 = new javax.swing.JButton();
        jButton4 = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Performance Client");

        jButton1.setText("Get it!");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jLabel1.setText("IP Address");

        jTextField1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTextField1ActionPerformed(evt);
            }
        });

        jTextArea1.setColumns(20);
        jTextArea1.setRows(5);
        jScrollPane1.setViewportView(jTextArea1);

        jButton2.setText("Get .txt File");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        jButton3.setText("Save in Database");
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });

        jButton4.setText("Chek");
        jButton4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton4ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 88, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(jTextField1, javax.swing.GroupLayout.DEFAULT_SIZE, 303, Short.MAX_VALUE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 127, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jButton2, javax.swing.GroupLayout.PREFERRED_SIZE, 164, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(jButton3, javax.swing.GroupLayout.PREFERRED_SIZE, 159, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(26, 26, 26)
                                .addComponent(jButton4, javax.swing.GroupLayout.PREFERRED_SIZE, 159, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(jScrollPane1))
                        .addGap(11, 11, 11)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButton1)
                    .addComponent(jLabel1)
                    .addComponent(jTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 329, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButton2)
                    .addComponent(jButton3)
                    .addComponent(jButton4))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jTextField1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jTextField1ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jTextField1ActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        try {
            startClient(jTextField1.getText());
        } catch (IOException ex) {
            Logger.getLogger(PrincipalFrame.class.getName()).log(Level.SEVERE, null, ex);
        } catch (InterruptedException ex) {
            Logger.getLogger(PrincipalFrame.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_jButton1ActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        chooser = new JFileChooser();
        
        chooser.setDialogTitle("Select Destination");
        chooser.setFileSelectionMode(JFileChooser.DIRECTORIES_ONLY);
       
        chooser.setAcceptAllFileFilterUsed(true);
        //    
        if (chooser.showOpenDialog(this) == JFileChooser.APPROVE_OPTION) {
            try {
                WriteFile(rl, chooser.getSelectedFile().toString()+"\\");
            } catch (IOException ex) {
                Logger.getLogger(PrincipalFrame.class.getName()).log(Level.SEVERE, null, ex);
            }
            
        } else {
            System.out.println("No Selection ");
        }
    }//GEN-LAST:event_jButton2ActionPerformed

    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed
        DataBase DB;
        int InsertedID;
        DB = new DataBase("192.168.25.100","Rilevazioni","webserver","Ecopc2014");
        try {
            if(DB.isDeviceInDatabase(this.rl)==0)
            {
                InsertedID=DB.InsertDevice(this.rl);
               DB.InsertRilevation(this.rl,InsertedID);
               System.out.println("Il device non era inserito e l'ho inserito con l'id: "+InsertedID);
                
            }
            else
            { 
                InsertedID=DB.isDeviceInDatabase(this.rl);
                DB.InsertRilevation(this.rl,InsertedID);
               System.out.println("Il device era già inserito nel database con id: "+InsertedID);
            }
            
        } catch (SQLException ex) {
            Logger.getLogger(PrincipalFrame.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_jButton3ActionPerformed

    private void jButton4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton4ActionPerformed
         DataBase DB;
        DB = new DataBase("192.168.25.100","Rilevazioni","webserver","Ecopc2014");
        try {
            if(DB.isDeviceInDatabase(this.rl)!=0)
            {
              
                JOptionPane.showMessageDialog(null, "Il Device è Presente nel Database!");
            }
            else
            { 
                
               JOptionPane.showMessageDialog(null, "Il Device NON è Presente nel Database!");
               
            }
            
        } catch (SQLException ex) {
            Logger.getLogger(PrincipalFrame.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_jButton4ActionPerformed
    public void startClient(String HOST) throws IOException, InterruptedException {

        try {

            Socket clientSocket = new Socket(HOST, 50000);
            try (ObjectInputStream inFromServer = new ObjectInputStream(clientSocket.getInputStream())) {
                rl = (Rilevazione) inFromServer.readObject();
            } catch (Exception e) {
                System.out.println(e.getMessage());
            }

            PrintOnTextBox(rl, jTextArea1);

        } catch (IOException e) {
            System.err.println("Client Error: " + e.getMessage());
            System.err.println("Localized: " + e.getLocalizedMessage());
            System.err.println("Stack Trace: " + e.getStackTrace());
        }
    }

    public void WriteFile(Rilevazione rl, String PathToFile) throws IOException 
    {
        try {
            String Path=PathToFile + "Rilevazione"+".txt";
            File file = new File(Path); 
            if(file.createNewFile())
            {
                System.out.println("Ok file creato");
            }
            else
            {
                System.out.println("Errore di creazione file ");
            }
            
            try (PrintWriter writer = new PrintWriter(file)) 
            {
                writer.println(jTextArea1.getText());
                /*
                writer.println("--------------------------------GENERAL INFORMATION------------------------------------------\r\n");
                writer.println("----BIOS\r\n");
                writer.println(rl.GeneralInformation.BIOS+"\r\n");

                writer.println("----MotherBoard\r\n");
                writer.println(rl.GeneralInformation.Baseboard+"\r\n");
                writer.println("----CPU\r\n");
                writer.println(rl.GeneralInformation.Processor+"\r\n");
                writer.println("----Memory Comtroller\r\n");
                writer.println(rl.GeneralInformation.MemoryController+"\r\n");
                writer.println("----System\r\n");
                writer.println(rl.GeneralInformation.Sistema+"\r\n");
                writer.println("----Chassis\r\n");
                writer.println(rl.GeneralInformation.Chassis+"\r\n");

                writer.println("--------------------------------CPU---------------------------------------------------------\r\n");
                writer.println("----General\r\n");
                writer.println(rl.ControlProcessingUnit.GeneralInfo+"\r\n");
                writer.println("----Temperature\r\n");
                writer.println(rl.ControlProcessingUnit.Temp+"\r\n");
                writer.println("----Usage\r\n");
                writer.println(rl.ControlProcessingUnit.Usage+"\r\n");

                writer.println("--------------------------------RAM----------------------------------------------------------\r\n");
                writer.println("----General\r\n");
                writer.println(rl.RandomAccessMemory.GeneralInfo+"\r\n");
                writer.println("----Free\r\n");
                writer.println(rl.RandomAccessMemory.Free+"\r\n");
                writer.println("----Total\r\n");
                writer.println(rl.RandomAccessMemory.Total+"\r\n");

                writer.println("----Swap Free\r\n");
                writer.println(rl.RandomAccessMemory.SwapFree+"\r\n");
                writer.println("----Swap Total\r\n");
                writer.println(rl.RandomAccessMemory.SwapTotal+"\r\n");

                writer.println("--------------------------------HDD----------------------------------------------------------");
                writer.println("----General\r\n");
                writer.println(rl.HardDrive.GeneralInfo+"\r\n");

                writer.println("----SMART SCAN\r\n");
                writer.println(rl.HardDrive.SMARTData+"\r\n");
                writer.println("\n----LOG\r\n");
                writer.println(rl.kernel.KernelLog+"\r\n");
                writer.println("\n--------------------------------Apache----------------------------------------------------------\r\n");
                writer.println("\n----LOG\r\n");

                writer.println("\n--------------------------------MYSQL----------------------------------------------------------\r\n");
                writer.println("\n----LOG\r\n");
                writer.println(rl.mysql.MySqlLog+"\r\n");
                writer.println("\n--------------------------------TOP----------------------------------------------------------\r\n");
                writer.println("\n----TOP\r\n");
                writer.println(rl.top.data+"\r\n");*/
                System.out.println(PathToFile + "\\Rilevazione-" + ".txt");
                jTextArea1.setText(null);
            }
        } catch (FileNotFoundException e) {
            System.out.println("Errore di scrittura");
        }
    }

    public void PrintOnTextBox(Rilevazione rl, javax.swing.JTextArea Area) {
        try {

            Area.append("--------------------------------GENERAL INFORMATION------------------------------------------\n");
            Area.append("\n----BIOS\n");
            Area.append(rl.GeneralInformation.BIOS);

            Area.append("\n----MotherBoard\n");
            Area.append(rl.GeneralInformation.Baseboard);
            Area.append("\n----CPU\n");
            Area.append(rl.GeneralInformation.Processor);
            Area.append("\n----Memory Comtroller\n");
            Area.append(rl.GeneralInformation.MemoryController);
            Area.append("\n----System\n");
            Area.append(rl.GeneralInformation.Sistema);
            Area.append("\n----Chassis\n");
            Area.append(rl.GeneralInformation.Chassis);

            Area.append("\n--------------------------------CPU---------------------------------------------------------\n");
            Area.append("\n----General\n");
            Area.append(rl.ControlProcessingUnit.GeneralInfo);
            Area.append("\n----Temperature\n");
            Area.append(rl.ControlProcessingUnit.Temp);
            Area.append("\n----Usage\n");
            Area.append(rl.ControlProcessingUnit.Usage);

            Area.append("\n--------------------------------RAM----------------------------------------------------------\n");
            Area.append("\n----General\n");
            Area.append(rl.RandomAccessMemory.GeneralInfo);
            Area.append("\n----Free\n");
            Area.append(rl.RandomAccessMemory.Free);
            Area.append("\n----Total\n");
            Area.append(rl.RandomAccessMemory.Total);

            Area.append("\n----Swap Free\n");
            Area.append(rl.RandomAccessMemory.SwapFree);
            Area.append("\n----Swap Total\n");
            Area.append(rl.RandomAccessMemory.SwapTotal);

            Area.append("\n--------------------------------HDD----------------------------------------------------------\n");
            Area.append("\n----General\n");
            Area.append(rl.HardDrive.GeneralInfo);

            Area.append("\n----SMART SCAN\n");
            Area.append(rl.HardDrive.SMARTData);
            Area.append("\n--------------------------------Kernel----------------------------------------------------------\n");
            Area.append("\n----LOG\n");
            Area.append(rl.kernel.KernelLog);
            Area.append("\n--------------------------------Apache----------------------------------------------------------\n");
            Area.append("\n----LOG\n");
            Area.append(rl.apache.ApacheLogs);
            Area.append("\n----LOGError\n");
            Area.append(rl.apache.ApacheError);
            Area.append("\n--------------------------------MYSQL----------------------------------------------------------\n");
            Area.append("\n----LOG\n");
            Area.append(rl.mysql.MySqlLog);
            Area.append("\n--------------------------------TOP----------------------------------------------------------\n");
            Area.append("\n----TOP\n");
            Area.append(rl.top.data);

        } catch (Exception e) {
            System.out.println("Errore di scrittura" + e.getMessage());
        }
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(PrincipalFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(PrincipalFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(PrincipalFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(PrincipalFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new PrincipalFrame().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private javax.swing.JButton jButton4;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTextArea jTextArea1;
    private javax.swing.JTextField jTextField1;
    // End of variables declaration//GEN-END:variables
}
